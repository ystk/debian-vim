From: Markus Koschany <apo@debian.org>
Date: Sat, 12 Mar 2022 11:25:32 +0100
Subject: CVE-2019-20807

Origin: https://github.com/vim/vim/commit/8c62a08faf89663e5633dc5036cd8695c80f1075
---
 runtime/doc/starting.txt | 13 ++++++++++---
 src/eval.c               | 20 ++++++++++++++++----
 src/ex_cmds.c            |  2 +-
 src/if_perl.xs           |  7 +++----
 4 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/runtime/doc/starting.txt b/runtime/doc/starting.txt
index 773a3b9..3e9faca 100644
--- a/runtime/doc/starting.txt
+++ b/runtime/doc/starting.txt
@@ -243,11 +243,18 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		changes and writing.
 		{not in Vi}
 
-						*-Z* *restricted-mode* *E145*
+					*-Z* *restricted-mode* *E145* *E981*
 -Z		Restricted mode.  All commands that make use of an external
 		shell are disabled.  This includes suspending with CTRL-Z,
-		":sh", filtering, the system() function, backtick expansion,
-		delete(), rename(), mkdir(), writefile(), libcall(), etc.
+		":sh", filtering, the system() function, backtick expansion
+		and libcall().
+		Also disallowed are delete(), rename(), mkdir(), job_start(),
+		etc.
+		Interfaces, such as Python, Ruby and Lua, are also disabled,
+		since they could be used to execute shell commands.  Perl uses
+		the Safe module.
+		Note that the user may still find a loophole to execute a
+		shell command, it has only been made difficult.
 		{not in Vi}
 
 							*-g*
diff --git a/src/eval.c b/src/eval.c
index 8f62cb2..83fd803 100644
--- a/src/eval.c
+++ b/src/eval.c
@@ -13041,7 +13041,7 @@ f_histadd(argvars, rettv)
 #endif
 
     rettv->vval.v_number = FALSE;
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
 #ifdef FEAT_CMDHIST
     str = get_tv_string_chk(&argvars[0]);	/* NULL on type error */
@@ -14129,6 +14129,9 @@ f_luaeval(argvars, rettv)
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_luaeval(str, argvars + 1, rettv);
 }
@@ -14791,6 +14794,9 @@ f_mzeval(argvars, rettv)
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_mzeval(str, rettv);
 }
@@ -15011,6 +15017,9 @@ f_py3eval(argvars, rettv)
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_py3eval(str, rettv);
 }
@@ -15028,6 +15037,9 @@ f_pyeval(argvars, rettv)
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_pyeval(str, rettv);
 }
@@ -16722,7 +16734,7 @@ f_setbufvar(argvars, rettv)
     typval_T	*varp;
     char_u	nbuf[NUMBUFLEN];
 
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
     (void)get_tv_number(&argvars[0]);	    /* issue errmsg if type error */
     varname = get_tv_string_chk(&argvars[1]);
@@ -17161,7 +17173,7 @@ f_settabvar(argvars, rettv)
 
     rettv->vval.v_number = 0;
 
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
 
 #ifdef FEAT_WINDOWS
@@ -19693,7 +19705,7 @@ f_writefile(argvars, rettv)
     FILE	*fd;
     int		ret = 0;
 
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
 
     if (argvars[0].v_type != VAR_LIST)
diff --git a/src/ex_cmds.c b/src/ex_cmds.c
index 02fe323..ffb67e7 100644
--- a/src/ex_cmds.c
+++ b/src/ex_cmds.c
@@ -4264,7 +4264,7 @@ check_restricted()
 {
     if (restricted)
     {
-	EMSG(_("E145: Shell commands not allowed in rvim"));
+	EMSG(_("E145: Shell commands and some functionality not allowed in rvim"));
 	return TRUE;
     }
     return FALSE;
diff --git a/src/if_perl.xs b/src/if_perl.xs
index 286ceb7..6c18a23 100644
--- a/src/if_perl.xs
+++ b/src/if_perl.xs
@@ -816,6 +816,7 @@ VIM_init()
 #ifdef DYNAMIC_PERL
 static char *e_noperl = N_("Sorry, this command is disabled: the Perl library could not be loaded.");
 #endif
+static char *e_perlsandbox = N_("E299: Perl evaluation forbidden in sandbox without the Safe module");
 
 /*
  * ":perl"
@@ -865,13 +866,12 @@ ex_perl(eap)
 	vim_free(script);
     }
 
-#ifdef HAVE_SANDBOX
-    if (sandbox)
+    if (sandbox || secure)
     {
 	safe = perl_get_sv("VIM::safe", FALSE);
 # ifndef MAKE_TEST  /* avoid a warning for unreachable code */
 	if (safe == NULL || !SvTRUE(safe))
-	    EMSG(_("E299: Perl evaluation forbidden in sandbox without the Safe module"));
+	    EMSG(_(e_perlsandbox));
 	else
 # endif
 	{
@@ -883,7 +883,6 @@ ex_perl(eap)
 	}
     }
     else
-#endif
 	perl_eval_sv(sv, G_DISCARD | G_NOARGS);
 
     SvREFCNT_dec(sv);
